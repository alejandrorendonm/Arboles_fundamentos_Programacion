import java.util.Scanner;

// Clase que representa un nodo del árbol
class Nodo {
    int dato;
    Nodo izquierdo;
    Nodo derecho;
    
    // Constructor
    public Nodo(int dato) {
        this.dato = dato;
        this.izquierdo = null;
        this.derecho = null;
    }
}

// Clase que representa el Árbol Binario
class ArbolBinario {
    Nodo raiz;
    
    // Constructor
    public ArbolBinario() {
        this.raiz = null;
    }
    
    // Método público para insertar un número
    public void insertar(int dato) {
        raiz = insertarRecursivo(raiz, dato);
        System.out.println("Número " + dato + " insertado correctamente.");
    }
    
    // Método privado recursivo para insertar
    private Nodo insertarRecursivo(Nodo nodo, int dato) {
        // Si el nodo está vacío, crear uno nuevo
        if (nodo == null) {
            return new Nodo(dato);
        }
        
        // Si el dato es menor, ir a la izquierda
        if (dato < nodo.dato) {
            nodo.izquierdo = insertarRecursivo(nodo.izquierdo, dato);
        }
        // Si el dato es mayor, ir a la derecha
        else if (dato > nodo.dato) {
            nodo.derecho = insertarRecursivo(nodo.derecho, dato);
        }
        // Si el dato ya existe, no hacer nada
        else {
            System.out.println("El número " + dato + " ya existe en el árbol.");
        }
        
        return nodo;
    }
    
    // Método público para recorrido inorden
    public void recorridoInorden() {
        if (raiz == null) {
            System.out.println("El árbol está vacío.");
            return;
        }
        System.out.print("Recorrido Inorden: ");
        recorridoInordenRecursivo(raiz);
        System.out.println();
    }
    
    // Método privado recursivo para recorrido inorden
    // Orden: Izquierda -> Raíz -> Derecha
    private void recorridoInordenRecursivo(Nodo nodo) {
        if (nodo != null) {
            recorridoInordenRecursivo(nodo.izquierdo);
            System.out.print(nodo.dato + " ");
            recorridoInordenRecursivo(nodo.derecho);
        }
    }
    
    // Método público para buscar un número
    public void buscar(int dato) {
        boolean encontrado = buscarRecursivo(raiz, dato);
        if (encontrado) {
            System.out.println("El número " + dato + " SÍ existe en el árbol.");
        } else {
            System.out.println("El número " + dato + " NO existe en el árbol.");
        }
    }
    
    // Método privado recursivo para buscar
    private boolean buscarRecursivo(Nodo nodo, int dato) {
        // Si el nodo es nulo, no se encontró
        if (nodo == null) {
            return false;
        }
        
        // Si se encontró el dato
        if (dato == nodo.dato) {
            return true;
        }
        
        // Si el dato es menor, buscar a la izquierda
        if (dato < nodo.dato) {
            return buscarRecursivo(nodo.izquierdo, dato);
        }
        // Si el dato es mayor, buscar a la derecha
        else {
            return buscarRecursivo(nodo.derecho, dato);
        }
    }
}

// Clase principal con el menú
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArbolBinario arbol = new ArbolBinario();
        int opcion;
        
        do {
            System.out.println("\n╔════════════════════════════════════╗");
            System.out.println("║   ÁRBOL BINARIO - MENÚ PRINCIPAL   ║");
            System.out.println("╚════════════════════════════════════╝");
            System.out.println("1. Insertar un número");
            System.out.println("2. Mostrar recorrido Inorden");
            System.out.println("3. Buscar un número");
            System.out.println("4. Salir");
            System.out.print("\nSeleccione una opción: ");
            
            opcion = scanner.nextInt();
            
            switch (opcion) {
                case 1:
                    System.out.print("\nIngrese el número a insertar: ");
                    int numeroInsertar = scanner.nextInt();
                    arbol.insertar(numeroInsertar);
                    break;
                    
                case 2:
                    System.out.println();
                    arbol.recorridoInorden();
                    break;
                    
                case 3:
                    System.out.print("\nIngrese el número a buscar: ");
                    int numeroBuscar = scanner.nextInt();
                    arbol.buscar(numeroBuscar);
                    break;
                    
                case 4:
                    System.out.println("\n¡Gracias por usar el programa!");
                    break;
                    
                default:
                    System.out.println("\nOpción inválida. Intente nuevamente.");
            }
            
        } while (opcion != 4);
        
        scanner.close();
    }
}
